"""
Quick scanner for possible vulnerable Ivanti Connect Secure appliances by country using Shodan.

Script version: 1.0

Please refer to the following CVEs for more information:

CVE-2023-46805
CVE-2024-21887

Based on the blog post by watchTowr Labs!:
https://labs.watchtowr.com/welcome-to-2024-the-sslvpn-chaos-continues-ivanti-cve-2023-46805-cve-2024-21887/

Shodan Query= http.favicon.hash:-1439222863 country:country_code
"""
import requests
import urllib3
from shodan import Shodan
urllib3.disable_warnings()

api = Shodan('API_KEY') # Here goes your Shodan API Key
ENDPOINT = "/api/v1/configuration/users/user-roles/user-role/rest-userrole1/web/web-bookmarks/bookmark"

country = input("Write country code to scan (like CL, US, CA, BR): ") # country code (ISO 3166-1)

try:
    results = api.search('http.favicon.hash:-1439222863 country:'+str(country)) # Ivanti Connect Secure Favicon MurmurHash 3
    print('Ivanti Connect Secure Appliances found: {}'.format(results['total']))
    for ip in results['matches']:
        ip_san=str(ip['ip_str']).replace("\n", "")
        url="https://"+ip_san+ENDPOINT
        response = requests.get(url, verify=False)
        if response.headers.get('content-type') == None: # Based on the response of the server we can check if the XML Mitigation was applied or not
            print(ip_san,"Vulnerable Ivanti Device!") # If we receive an empty response with just a 403 code the appliance might be vulnerable
        else:
            print(ip_san,"XML Mitigation Applied!") # If not, the XML mitigation was applied
except (shodan.APIError, e):
    print('Error: {}'.format(e))
